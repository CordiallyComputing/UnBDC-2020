countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country id.")
}
}
all_plots <- sapply(countries_of_interest, cumulative_rates)
grid_arrange(all_plots, nrow=length(countries_of_interest))
}
compare_countries("PHL")
compare_countries <- function(countries=list("all")){
countries_of_interest <- NULL
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country Id!")
}
}
all_plots <- sapply(countries_of_interest, cumulative_rates)
grid.arrange(all_plots, nrow=length(countries_of_interest))
}
help(grid.arrange)
compare_countries("PHL")
compare_countries(c("PHL", "JPN"))
compare_countries(c("PHI", "JPN"))
compare_countries(c("PHL", "JPN"))
compare_countries <- function(countries=list("all")){
countries_of_interest <- NULL
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country Id!")
}
}
all_plots <- sapply(countries_of_interest, cumulative_rates)
grid.arrange(grobs=all_plots, nrow=length(countries_of_interest))
}
compare_countries(c("PHL", "JPN"))
library(COVID19)
library(tidyverse)
library(ggthemes)
covid <- covid19()
#Getting Data of Interest
covid <- covid %>%
select(id, date, confirmed, recovered, deaths, population)
#Current Number of Days
total_days <- sum(covid$id == sample(covid$id, 1, replace=TRUE))
#All countries
all_ids <- levels(as.factor(covid$id))
cumulative_rates <- function(country){
#Validate input
if(!any(covid$id == country)) stop()
#Obtain local data
local_covid_data <- covid %>% filter(id == country)
#Create empty vectors
deaths_per_current_cases <- vector("numeric", length=total_days)
recover_per_current_cases <- vector("numeric", length=total_days)
#Calculate cumulative death and recover rate per day
for(i in 1:total_days){
death_rate <- sum(local_covid_data[["deaths"]][1:i]) /
sum(local_covid_data[["confirmed"]][1:i])
recover_rate <- sum(local_covid_data[["recovered"]][1:i]) /
sum(local_covid_data[["confirmed"]][1:i])
deaths_per_current_cases[i] = death_rate
recover_per_current_cases[i] = recover_rate
}
#Replace NaN with 0
deaths_per_current_cases <- replace_na(deaths_per_current_cases, 0)
recover_per_current_cases <- replace_na(recover_per_current_cases, 0)
#Aesthetics Variables
legend_x_pos <- round(local_covid_data$date[length(local_covid_data$date)/2])
cases_began <- local_covid_data %>% filter(confirmed > 0) %>%
pull(date)
label <- data.frame(my_text="first confirmed case", x = cases_began[10] + 1, y = 0.41)
#Plot
local_covid_data %>% ggplot(aes(date)) +
geom_line(aes(y=deaths_per_current_cases, color="who died"), size=0.75, alpha=0.9) +
geom_line(aes(y=recover_per_current_cases, color="who recovered"), size=0.75, alpha=0.9) +
geom_vline(xintercept=cases_began[1], linetype="dotted") +
geom_text(data=label, aes(x, y, label=my_text), size=2.5) +
ggtitle(sprintf("Proportion of Infected in %s at Time X", country)) +
xlab(NULL) +
scale_y_continuous(name="Cumulative Rates\n", limits = c(0, 0.5)) +
scale_color_manual(values=c("red", "blue")) +
theme_clean() +
theme(plot.title = element_text(size=12, vjust=0.5, hjust=0.5, face="bold"),
axis.title.y = element_text(vjust=1, size=10),
legend.position = "bottom",
legend.title=element_blank())
}
compare_countries <- function(countries=list("all")){
countries_of_interest <- NULL
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country Id!")
}
}
all_plots <- sapply(countries_of_interest, cumulative_rates)
grid.arrange(grobs=all_plots, nrow=length(countries_of_interest))
}
any(all_ids == "JPN")
any(all_ids == "PHL")
compare_countries(c("PHL", "JPN"))
countries = c("PHL", "JPN", "WTFISTHIS")
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country Id!")
}
}
countries_of_interest <- NULL
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country Id!")
}
}
countries_of_interest
all_plots <- sapply(countries_of_interest, cumulative_rates)
all_plots
type(all_plots)
ln(all_plots)
class(all_plots)
class(all_plots[1])
class(all_plots[[1])
class(all_plots[[1]])
grid.arrange(all_plots)
grid.arrange(all_plots[])
grid.arrange(grobs=all_plots)
grid.arrange(grobs=all_plots[])
grid.arrange(grobs=all_plots[[]])
grid.arrange(grobs=pull(all_plots))
grid.arrange(all_plots["PHL"], all_plots["JPN"])
as.grob()
library("grid")
library(grid)
library(ggplotify)
install.packages("ggplotify")
library(ggplotify)
grid.arrange(grobs=as.grob(all_plots), nrow=length(countries_of_interest))
as.grob(all_plots)
as.grob(all_plots[1])
plot(all_plots)
plot(all_plots[1])
print(all_plots)
print(all_plots[])
print(all_plots[[]])
print(all_plots[[1]])
cumulative_rates("PHL")
class(cumulative_rates("PHL"))
p <- cumulative_rates("PHL")
p
class(p)
all_plots <- lapply(countries_of_interest, cumulative_rates)
all_plots
all_plots[[1]]
grid.arrange(grobs=all_plots), nrow=length(countries_of_interest))
grid.arrange(grobs=all_plots, nrow=length(countries_of_interest))
label <- data.frame(my_text="first confirmed case", x = cases_began[9] + 1, y = 0.41)
library(COVID19)
library(tidyverse)
library(ggthemes)
library(grid)
library(ggplotify)
covid <- covid19()
#Getting Data of Interest
covid <- covid %>%
select(id, date, confirmed, recovered, deaths, population)
#Current Number of Days
total_days <- sum(covid$id == sample(covid$id, 1, replace=TRUE))
#All countries
all_ids <- levels(as.factor(covid$id))
cumulative_rates <- function(country){
#Validate input
if(!any(covid$id == country)) stop()
#Obtain local data
local_covid_data <- covid %>% filter(id == country)
#Create empty vectors
deaths_per_current_cases <- vector("numeric", length=total_days)
recover_per_current_cases <- vector("numeric", length=total_days)
#Calculate cumulative death and recover rate per day
for(i in 1:total_days){
death_rate <- sum(local_covid_data[["deaths"]][1:i]) /
sum(local_covid_data[["confirmed"]][1:i])
recover_rate <- sum(local_covid_data[["recovered"]][1:i]) /
sum(local_covid_data[["confirmed"]][1:i])
deaths_per_current_cases[i] = death_rate
recover_per_current_cases[i] = recover_rate
}
#Replace NaN with 0
deaths_per_current_cases <- replace_na(deaths_per_current_cases, 0)
recover_per_current_cases <- replace_na(recover_per_current_cases, 0)
#Aesthetics Variables
legend_x_pos <- round(local_covid_data$date[length(local_covid_data$date)/2])
cases_began <- local_covid_data %>% filter(confirmed > 0) %>%
pull(date)
label <- data.frame(my_text="first confirmed case", x = cases_began[9] + 1, y = 0.41)
#Plot
local_covid_data %>% ggplot(aes(date)) +
geom_line(aes(y=deaths_per_current_cases, color="who died"), size=0.75, alpha=0.9) +
geom_line(aes(y=recover_per_current_cases, color="who recovered"), size=0.75, alpha=0.9) +
geom_vline(xintercept=cases_began[1], linetype="dotted") +
geom_text(data=label, aes(x, y, label=my_text), size=2.5) +
ggtitle(sprintf("Proportion of Infected in %s at Time X", country)) +
xlab(NULL) +
scale_y_continuous(name="Cumulative Rates\n", limits = c(0, 0.5)) +
scale_color_manual(values=c("red", "blue")) +
theme_clean() +
theme(plot.title = element_text(size=12, vjust=0.5, hjust=0.5, face="bold"),
axis.title.y = element_text(vjust=1, size=10),
legend.position = "bottom",
legend.title=element_blank())
}
compare_countries <- function(countries=list("all")){
countries_of_interest <- NULL
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country Id!")
}
}
all_plots <- lapply(countries_of_interest, cumulative_rates)
grid.arrange(grobs=all_plots, nrow=length(countries_of_interest))
}
compare_countries(c("USA", "PHL", "JPN"))
compare_countries(
)
warnings()
compare_countries(all_ids[1:10])
compare_countries(all_ids[1:5])
compare_countries(all_ids[1:4])
help(dev.off)
compare_countries <- function(countries=list("all")){
countries_of_interest <- NULL
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(any(all_ids == possible_id)) countries_of_interest <- c(countries_of_interest, possible_id)
}
if(is.null(countries_of_interest)){
stop("No Input is a valid country Id!")
}
}
all_plots <- lapply(countries_of_interest, cumulative_rates)
if(length(countries_of_interest) <= 5){
grid.arrange(grobs=all_plots, nrow=length(countries_of_interest))
}else{
pdf("Comparison of Country Indicators.pdf", onefile=TRUE)
for(i in all_plots){
do.call("grid.arrange", all_plots)
}
dev.off()
}
}
compare_countries(all_ids[1:10])
setwd("C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/UnBDC 2020")
setwd("C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/UnBDC 2020")
library(COVID19)
library(tidyverse)
library(ggthemes)
library(gridExtra)
#Optional Settings
set.seed(1987, sample.kind="Rounding")     #OPTIONAL: keeps results consistent
countries_to_investigate <- SOUTHERN_EU              #OPTIONAL: replace with country ids from all_ids
new_table <- data.frame()
#==========================================================================================================#
#ALL COUNTRIES
ALL <- c("all")
#Africa Subregions
EASTERN_AF <- c("BDI", "COM", "DJI", "ERI", "KEN", "MDG", "MWI", "MUS", "MYT", "MOZ", "REU", "RWA", "SYC", "SOM", "TZA", "UGA", "ZMB", "ZWE")
MIDDLE_AF <- c("AGO", "CMR", "CAF","TCD", "COG", "COD", "GNQ", "GAB", "STP")
NORTHERN_AF <- c("DZA", 'EGY', 'LBY', 'MAR', 'SSD', 'SDN', 'TUN', 'ESH')
SOUTHERN_AF <- c('BWA', 'SWZ', 'LSO', 'NAM', 'ZAF')
WESTERN_AF <- c('BEN', 'BFA', 'CPV', 'CIV', 'GMB', 'GHA', 'GIN', 'GNB', 'LBR', 'MLI', 'MRT', 'NER', 'NGA', 'SHN', 'SEN', 'SLE', 'TGO')
AFRICA <- list(EASTERN_AF, MIDDLE_AF, NORTHERN_AF, SOUTHERN_AF, WESTERN_AF)
same_name <- c('COG', 'COD')
#Asia Subregions
CENTRAL_AS <- c('TJK', 'UZB', 'KAZ', 'TKM', 'KGZ')
EAST_AS <- c('CHN', 'MNG', 'PRK', 'KOR', 'JPN', 'HKG', 'TWN', 'MAC')
SOUTH_AS <- c('LKA', 'BGD', 'IND', 'AFG', 'PAK', 'BHU', 'NPL', 'MDV')
SOUTHEAST_AS <- c('VNM', 'MYS', 'IDN', 'LAO', 'BRN', 'SGP', 'PHL', 'MMR', 'TLS', 'THA', 'KHM', "CXR", 'CCK')
WESTERN_AS <- c('GEO', 'ARM', 'AZE', 'TUR', 'CYP', 'SYR', 'LBN', 'ISR', 'PSE', 'JOR', 'IRQ', 'IRN', 'KWT', 'BHR', 'QAT', 'SAU')
ASIA <- list(CENTRAL_AS, EAST_AS, SOUTH_AS, SOUTHEAST_AS, WESTERN_AS)
#Europe Subregions
EASTERN_EU <- c('BLR', 'BGR', 'CZE', 'HUN', 'POL', 'MDA', 'ROU', 'RUS', 'SVK', 'UKR')
NORTHERN_EU <- c('ALA', 'DNK', 'EST', 'FRO', 'FIN', 'GGY', 'ISL', 'IRL', 'IMN', 'JEY', 'LVA', 'LTU', 'NOR', 'SJM', 'SWE', 'GBR')
SOUTHERN_EU <- c('ALB', 'AND', 'BIH', 'HRV', 'GIB', 'GRC', 'ITA', 'MKD', 'MLT', 'MNE', 'PRT', 'SMR', 'SRB', 'SVN', 'ESP', 'VAT')
WESTERN_EU <- c('AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE')
EUROPE <- list(NORTHERN_EU, SOUTHERN_EU, WESTERN_EU, EASTERN_EU)
#America subregions
NORTHERN_NA <- c('CAN', 'GRL', 'MEX', 'USA')
CARRIBEAN <- c('AIA', 'ATG', 'ABW', 'BHS', 'BRB', 'BMU', 'VGB', 'CYM', 'CUB', 'CUW', 'DMA', 'DOM', 'GRD', 'GLP', 'HTI',
'JAM', 'MTQ', 'MSR', 'PRI', 'KNA', 'LCA', 'VCT', 'TTO', 'VIR')
CENTRAL_AM <- c('BLZ', 'CRC', 'SLV', 'GTM', 'HND', 'NIC', 'PAN')
SOUTH_AM <- c('ARG', 'BOL', 'BRA', 'CHL', 'COL', 'ECU', 'GUF', 'GUY', 'PRY', 'PER', 'SUR', 'URY', 'VEN')
AMERICA <- list(NORTHERN_NA, CARRIBEAN, CENTRAL_AM, SOUTH_AM)
#==========================================================================================================#
#Get Data
covid <- covid19() %>%
select(id, date, confirmed, recovered, deaths, population)
density_dataset <- read.delim("Country Population Density 2018.txt", header=TRUE) %>%
select(Country.Name, Country.Code, X2018..YR2018.) %>% filter(X2018..YR2018. != "..") %>%
mutate(Popu_Density= round(as.numeric(X2018..YR2018.))) %>%
select(Country.Name, Country.Code, Popu_Density) %>%
arrange(Country.Code)
names(density_dataset)[2] <- "ID"
#Making Datasets Equal
density_dataset <- density_dataset %>%
filter(ID %in% covid$id)
covid <- covid %>%
filter(id %in% density_dataset$ID)
#==========================================================================================================#
#Static Global Variables
total_days <- sum(covid$id == sample(covid$id, 1, replace=TRUE))
all_ids <- levels(as.factor(covid$id))
#Dynamic Global Variables
latest_case_fatality <- vector()
latest_survival_rate <- vector()
## MAIN FUNCTION: Compares countries using cumulative_rates()
compare_countries <- function(countries=countries_to_investigate){
countries_of_interest <- NULL
latest_case_fatality <<- NULL
latest_survival_rate <<- NULL
#Validate Input
if(countries[1]=="all"){
countries_of_interest = all_ids
}else{
for(possible_id in countries){
if(possible_id %in% all_ids){
countries_of_interest <- c(countries_of_interest, possible_id)
}
}
stopifnot(!is.null(countries_of_interest))
}
#Sort Countries
countries_of_interest <- sort(countries_of_interest)
#Get plots
all_plots <- lapply(countries_of_interest, cumulative_rates)
#Plot ggplots OR place in pdf if 5 countries or more compared
if(length(countries_of_interest) <= 4){
grid.arrange(grobs=all_plots, nrow=length(countries_of_interest))
}else{
pdf("COVID-19 Exploratory Data Analysis.pdf", onefile=TRUE)
for(i in seq(length(all_plots))){
do.call("grid.arrange", all_plots[i])
}
dev.off()
}
print(similar_countries(countries_of_interest))
print("Countries with less than 1000 cases are removed.")
}
## FUNCTION: Rates per country
cumulative_rates <- function(country){
#Obtain local data
local_covid_data <- covid %>% filter(id == country)
#Compute Case Fatality and Survival Rate
deaths_per_current_cases <- local_covid_data[["deaths"]] /
sympto_and_asympto(local_covid_data[["confirmed"]])
recover_per_current_cases <- local_covid_data[["recovered"]] /
sympto_and_asympto(local_covid_data[["confirmed"]])
#Replace NaN with 0
deaths_per_current_cases <- replace_na(deaths_per_current_cases, 0)
recover_per_current_cases <- replace_na(recover_per_current_cases, 0)
latest_case_fatality <<- c(latest_case_fatality, deaths_per_current_cases[total_days])   #updating variable
latest_survival_rate <<- c(latest_survival_rate, recover_per_current_cases[total_days])  #updating variable
#Aesthetics Variables
legend_x_pos <- round(local_covid_data$date[length(local_covid_data$date)/2])
cases_began <- local_covid_data %>% filter(confirmed > 0) %>%
pull(date)
cases_thousand <- local_covid_data %>% filter(confirmed >= 1000) %>%
pull(date)
label_began <- data.frame(my_text="first case", x = cases_began[1]-2, y = 0.41)
label_thousand <- data.frame(my_text="first thousand cases", x = cases_thousand[1]-2, y = 0.41)
#GGPlot
local_covid_data %>% ggplot(aes(date)) +
geom_line(aes(y=deaths_per_current_cases, color="who died"), size=0.75, alpha=0.9) +
geom_line(aes(y=recover_per_current_cases, color="who recovered"), size=0.75, alpha=0.9) +
geom_vline(xintercept=cases_began[1], linetype="dotted") +
geom_vline(xintercept=cases_thousand[1], linetype="dotted") +
geom_text(data=label_began, aes(x, y, label=my_text), size=2.5, angle=90) +
geom_text(data=label_thousand, aes(x, y, label=my_text), size=2.5, angle=90) +
ggtitle(sprintf("COVID-19 Case Fatality Rate & Survival Rate in %s", country)) +
xlab(NULL) +
scale_y_continuous(name="Proportion of Infected\n", limits = c(0, 0.9)) +
scale_color_manual(values=c("red", "blue")) +
theme_clean() +
theme(plot.title = element_text(size=12, vjust=0.5, hjust=0.5, face="bold"),
axis.title.y = element_text(vjust=1, size=10),
legend.position = "bottom",
legend.title=element_blank())
}
## Helper FUNCTION: Provides estimate of true number of cases
sympto_and_asympto <- function(cases){
avg <- 17.9                                         #As estimated by Mizumoto et al.
sigma <- (avg - 15.5)/2
#Taking a sample of possible proportion of asymptomatic cases
prop <- sample(rnorm(1000, avg, sigma), 1, replace=TRUE) / 100
(prop*cases) + cases
}
## Arranges Countries by Population Size
similar_countries <- function(country,
min_cases=1000,
fatality=latest_case_fatality,
survival=latest_survival_rate){
#Get difference between survival rate and case fatality
differ <- survival - fatality
#Grabbing Data
cases <- covid %>%
select(id, confirmed, date) %>%
filter(id %in% country & date == max(date)) %>%
pull(confirmed)
popu <- covid %>%
select(id, population, date) %>%
filter(id %in% country & date == max(date)) %>%
pull(population)
percent_infected = 100*cases/popu
#Create new dataframe containing id, case fatality, survival rate, difference and total cases
compared_countries <- data.frame(id=country,
survival_rate=survival,
case_fatality=fatality,
percent_population_infected=percent_infected,
difference=differ,
total_cases=cases,
population=popu) %>%
filter(total_cases>min_cases)
#Arrange by difference and display
new_table <<- compared_countries %>% arrange(desc(population, confirmed))
# #Plot
# color_blind_friendly_cols <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00")
# scale_color_manual(values = color_blind_friendly_cols) +
#
# compared_countries %>%
#   ggplot(aes(x=percent_population_infected, y=case_fatality, label=id, color=id)) +
#   geom_point(size=2.5, show.legend = FALSE) +
#   geom_text(nudge_y=0.00225, size=3, color="black") +
#   scale_y_continuous(limits = c(0, 0.08)) +
#   ylab("Case Fatality \n(total deaths / total cases)\n") +
#   xlab("\nPercent of the Population Infected") +
#   ggtitle("Countries in Asia with > 1000 Cases") +
#   theme_clean() +
#   theme(plot.title = element_text(size=15, vjust=0.5, hjust=0.5, face="bold"),
#         axis.title.y = element_text(size=12, lineheight=1.2),
#         axis.title.x = element_text(size=12, lineheight=1))
#
}
#NOTE that the graph is the only part where the estimation for TRUE no. of cases is used
#AFRICA[[5]] seems to have slight correlation
#For Countries in Western Africa with Cases > 2000, we observe that case fatality and percent of the population infected are
#negatively correlated with an R-squared value of 0.7908 and a p value of 0.04348
#However, we notice that the countries
#linear_reg <- compared_countries %>% lm(formula= percent_population_infected~case_fatality)
#print(summary(linear_reg))
#geom_text(x=0.0225, y=0.03, color="black", label="R-Squared=0.79 \np-value=0.0435", hjust=0, size=3.5, show.legend = FALSE) +
#geom_abline(slope=-1.013244, intercept=0.028254) +
#ggtitle("Countries in Western Africa with > 2000 Cases") +
#ASIA[[2]] check correlation with of case fatality and days till 1000 cases
#  compared_countries %>% ggplot(aes(x=percent_population_infected, y=case_fatality, label=id, color=id)) +
# geom_point(size=2.5, show.legend = FALSE) +
# geom_text(nudge_y=0.00225, size=3, color="black") +
# scale_y_continuous(limits = c(0, 0.08)) +
# scale_color_manual(values = color_blind_friendly_cols) +
# ylab("Case Fatality \n(total deaths / total cases)\n") +
# xlab("\nPercent of the Population Infected") +
# ggtitle("Countries in Asia with > 1000 Cases") +
# theme_clean() +
# theme(plot.title = element_text(size=15, vjust=0.5, hjust=0.5, face="bold"),
#       axis.title.y = element_text(size=12, lineheight=1.2),
#       axis.title.x = element_text(size=12, lineheight=1))
#covid %>% select(id, date, population, deaths) %>%
# filter(date == max(date) & id%in%country) %>%
#   ggplot(aes(x=population, y=case_fatality, label=id, color=id)) +
#   geom_label(nudge_y=0.00225, size=3, color="black", show.legend = FALSE) +
#   ylab("Deaths from Covid-19\n") +
#   xlab("\nPopulation") +
#   scale_x_log10() +
#   scale_y_log10() +
#   ggtitle("Countries in Asia with > 1000 Cases") +
#   theme_clean() +
#   theme(plot.title = element_text(size=15, vjust=0.5, hjust=0.5, face="bold"),
#         axis.title.y = element_text(size=12, lineheight=1.2),
#         axis.title.x = element_text(size=12, lineheight=1))
compare_countries("ITA")
compare_countries(c("ITA", "ESP", "GRC"))
